const axios = require('axios');
const {_cleanAxiosErrorForLogging} = require("./axiosHelper");

// https://developers.liveperson.com/domain-api.html

const qaCSDSHost = 'hc1n.dev.lprnd.net';
const productionCSDSHost = 'adminlogin.liveperson.net';

// there are two different CSDS servers, QA accounts all begin with "le"
function getCSDSDomain(accountId) {
    return (accountId.substr(0, 2) === 'le') ? qaCSDSHost : productionCSDSHost;
}

// request the domain for a specific service for a specified account
async function fetchByServiceName(accountId, serviceName) {
    const host = getCSDSDomain(accountId);
    const uri = `http://${host}/api/account/${accountId}/service/${serviceName}/baseURI.json?version=1.0`;
    try {
        const result = await axios.get(uri);
        return result.data['baseURI'];

    } catch (err) {
        // catch axios errors, clean up and re-throw
        throw _cleanAxiosErrorForLogging(err);
    }
}

// gets a list of all domains for a specified account
async function fetchByAccountId(accountId) {
    const host = getCSDSDomain(accountId);
    const uri = `http://${host}/csdr/account/${accountId}/service/baseURI.json?version=1.0`;
    try {
        const result = await axios.get(uri);
        return result.data['baseURIs'];

    } catch (err) {
        // catch axios errors, clean up and re-throw
        throw _cleanAxiosErrorForLogging(err);
    }
}

/**
 * CSDS http calls
 * @category Services
 */

/**
 * Enum for CSDS service names
 * @readonly
 * @enum {string}
 * @static
 * @alias module:CSDS/ServiceName
 */
const ServiceName = {

    // ums (what is the difference between these?)
    asyncMessaging: 'asyncMessaging',
    asyncMessagingEnt: 'asyncMessagingEnt',

    // auth token generators
    idp: 'idp',
    agentVep: 'agentVep',

    // live engage
    liveEngage: 'liveEngage',
    liveEngageUI: 'liveEngageUI',
    liveEngageVep: 'liveEngageVep',
    leBilling: 'leBilling',
    leIntegration: 'leIntegration',
    leRBMstr: 'leRBMstr',
    leDataReporting: 'leDataReporting',
    leBackofficeInt: 'leBackofficeInt',
    leBiMstr: 'leBiMstr',
    leCdnDomain: 'leCdnDomain',

    // ac
    acCdnDomain: 'acCdnDomain',
    accountConfigReadOnly: 'accountConfigReadOnly',
    accountConfigReadWrite: 'accountConfigReadWrite',

    sentinel: 'sentinel',
    faasUI: 'faasUI',
    intentAnalyzer: 'intentAnalyzer',
    msgHist: 'msgHist',
    faasGW: 'faasGW',
    visitManager: 'visitManager',
    staticContent: 'staticContent',
    lpEng: 'lpEng',
    mobileVisit: 'mobileVisit',
    keyService: 'keyService',
    msdkgw: 'msdkgw',
    pusherInt: 'pusherInt',
    rtDashboard: 'rtDashboard',
    cqmMsg: 'cqmMsg',
    facadeMsg: 'facadeMsg',
    accountCreation: 'accountCreation',
    redirect: 'redirect',
    mcs: 'mcs',
    batchelor: 'batchelor',
    coBrowse: 'coBrowse',
    provisionGW: 'provisionGW',
    engHistDomain: 'engHistDomain',
    tokenizer: 'tokenizer',
    leadGenerator: 'leadGenerator',
    routingBot: 'routingBot',
    visitorFeed: 'visitorFeed',
    swift: 'swift',
    routingMsg: 'routingMsg',
    pusher: 'pusher',
    mTag: 'mTag',
    adminArea: 'adminArea',
    conversationVep: 'conversationVep',
    smt: 'smt',
    nlp: 'nlp',
    loggos: 'loggos',
    agent: 'agent',
    rtbf: 'rtbf',
    act: 'act',
    etool: 'etool',
    openPlatform: 'openPlatform',
    coApp: 'coApp',
    mobileChat: 'mobileChat',
    predictiveDialer: 'predictiveDialer',
    msgEwtAPI: 'msgEwtAPI',
    appKeyManagement: 'appKeyManagement',
    connectionPanel: 'connectionPanel'
};

module.exports = {
    fetchByServiceName,
    fetchByAccountId,
    ServiceName
};
