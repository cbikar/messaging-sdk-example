const axios = require('axios');
const CSDS = require('./csds-cache');
const {_cleanAxiosErrorForLogging} = require("./axiosHelper");

/**
 * IDP module for generating and authenticating consumer connections to UMS
 * @module idp
 * @category Services
 */

/**
 * Generates a consumer signup token
 * @param {string} accountId - the brand's accountId
 * @returns {string} - JWT token
 */
async function getSignupToken(accountId) {

    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.idp);
    const url = `${CSDS.defaultHttpProtocol}://${domain}/api/account/${accountId}/signup`;

    try {
        const res = await axios.post(url);
        return res['data']['jwt'];

    } catch (err) {
        // catch axios errors, clean up and re-throw
        throw _cleanAxiosErrorForLogging(err);
    }

}

/**
 * Generates a consumer anonymous token
 * @param {string} accountId - the brand's accountId
 * @returns {string} - token
 * @throws {Error} - unAuth messaging feature is not enabled for accountId
 * @throws {Error} - other errors
 */
async function getAnonymousToken(accountId) {

    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.idp);
    const url = `${CSDS.defaultHttpProtocol}://${domain}/api/account/${accountId}/anonymous/authorize`;

    try {
        const res = await axios.post(url, {}, {
            headers: {
                'Content-Type': 'application/json'
            }
        });

        return res.data.token;
    }

    catch (error) {
        if (error.message === "Request failed with status code 428") {
            // AC Features for Un_Auth_Messaging should be toggled on in Houston
            throw new Error(`unAuth messaging feature is not enabled for accountId: ${accountId}`);
        }
        else {
            // catch axios errors, clean up and re-throw
            throw _cleanAxiosErrorForLogging(error)
        }
    }
}

/**
 * Authenticates a given consumer anonymous token
 * @param {string} accountId - the brand's accountId
 * @param {string} connectorId - the connectorId of the ACR-0 connector
 * @param {string} token - token generated from getAnonymousToken method, NOT the signup token
 * @returns {Promise<string>} token
 */
async function authenticateAnonymousToken(accountId, connectorId, token) {

    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.idp);
    const url = `${CSDS.defaultHttpProtocol}://${domain}/api/account/${accountId}/app/${connectorId}/authenticate?v=3.0`;

    const data = {id_token: token};

    try {
        const res = await axios.post(url, data);
        return res['data']['token'];

    } catch (err) {
        // catch axios errors, clean up and re-throw
        throw _cleanAxiosErrorForLogging(err);
    }
}

/**
 * Takes an already authenticated UNAUTH token and steps it up
 * @param {string} accountId - the brand's accountId
 * @param {string} connectorId - the connectorId of the authenticated connector
 * @param {string} token - authenticated token
 * @returns {Promise<string>} token
 */
async function getMockStepupToken(accountId, authConnectorId, token, customerName) {

    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.idp);
    const url = `${CSDS.defaultHttpProtocol}://${domain}/api/account/${accountId}/app/${authConnectorId}/authenticate?v=3.0`;

    const data = {lp_jwt: token, code: customerName};

    try {
        const res = await axios.post(url, data);
        return res['data']['token'];

    } catch (err) {
        // catch axios errors, clean up and re-throw
        throw _cleanAxiosErrorForLogging(err);
    }
}

/**
 * This will generate a mock auth flow JWT with SDEs that indicate:
 *   "Customer Name" is as provided
 *   "Customer ID" is lpTest{customerName}
 * @param {string} accountId
 * @param {string} customerName
 * @returns {Promise<string>} token
 */
async function getMockAuthToken(accountId, customerName) {

    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.idp);
    const url = `${CSDS.defaultHttpProtocol}://${domain}/api/account/${accountId}/app/default/authenticate?v=2`;

    const data = {
        code: customerName,
        redirect_uri: 'https://liveperson.net'
    };

    try {
        const res = await axios.post(url, data);
        return res['data']['token'];

    } catch (err) {
        // catch axios errors, clean up and re-throw
        throw _cleanAxiosErrorForLogging(err);
    }
}

/*

async function getAuthenticatedConsumerToken(accountId, authCode) {

    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.idp);
    const url = `https://${domain}/api/account/${accountId}/authenticate`;

    const res = await axios({
        method: 'post',
        url,
        data: {
            authCode
        }
    });

    return res['data']['jwt'];
}

async function getAuthenticatedConsumerTokenStepUp(accountId, connectorId, jwt, data) {

    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.idp);
    const url = `https://${domain}/api/account/${accountId}/app/${connectorId}/authenticate?v=3.0`;

    let json = JSON.stringify(data, null, 4);
    let buff = new Buffer(json);
    let code = buff.toString('base64');

    const res = await axios({
        method: 'post',
        url,
        data: {
            lp_jwt: jwt,
            code: code
        }
    });

    return res['data']['token'];
}

// used for send API
// needs an appJwt from sentinel
async function getConsumerTokenV1(accountId, appJwt, data) {

    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.idp);
    const url = `https://${domain}/api/account/${accountId}/consumer?v=1.0`;

    const res = await axios({
        method: 'post',
        url,
        data,
        headers: {
            Authorization: appJwt
            // 'Content-Type': 'application/json'
        }
    });

    return res['data']['token'];
}

POST 1:
https://va-a.idp.liveperson.net/api/account/59452402/anonymous/authorize?__d=19313
response:
{"token":"TOKEN1"}

POST 2:
https://va-a.idp.liveperson.net/api/account/59452402/app/{unauth_connectorId}/authenticate?v=3&__d=13193
{"id_token":"TOKEN1"}
response:
{"token":"TOKEN2"}

-- ENTERED NAME, which refreshes the page --

POST 3:
https://va-a.idp.liveperson.net/api/account/59452402/app/{unauth_connectorId}/authenticate?v=3.0&__d=81187
{"id_token":"TOKEN1"}
response:
{"token":"TOKEN2"}

POST 4:
https://va-a.idp.liveperson.net/api/account/59452402/app/{auth_connectorId}/authenticate?v=3.0&__d=96052
{"lp_jwt":"TOKEN2", "code":"scott2"}
response:
{"token":"TOKEN3"}
*/

module.exports = {
    getSignupToken,
    getAnonymousToken,
    authenticateAnonymousToken,

    getMockAuthToken,
    getMockStepupToken
}
