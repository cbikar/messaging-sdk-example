const axios = require('axios');
const CSDS = require('./csds-cache');
const VError = require('verror');
const {_cleanAxiosErrorForLogging} = require('./axiosHelper');

async function getAgentSession(accountId, loginInfo) {

    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.agentVep);
    const url = `${CSDS.defaultHttpProtocol}://${domain}/api/account/${accountId}/login?v=1.3`;

    // construct the body
    let data = null;

    // human user login
    if (loginInfo.username && loginInfo.password) {
        data = {
            username: loginInfo.username,
            password: loginInfo.password
        };
    }

    // bot user login
    // in houston for account: under ac-features: enable: Common.API_User_Login & Common.User_type_bot.
    // Click "UPDATE FEATURES"
    else if (loginInfo.username && loginInfo.appKey) {

        // TODO add a link to the info page about this
        if (!loginInfo.secret) throw new Error('appKey provided, but missing secret')
        if (!loginInfo.accessToken) throw new Error('appKey provided, but missing accessToken')
        if (!loginInfo.accessTokenSecret) throw new Error('appKey provided, but missing accessTokenSecret')

        data = {
            username: loginInfo.username,
            appKey: loginInfo.appKey,
            secret: loginInfo.secret,
            accessToken: loginInfo.accessToken,
            accessTokenSecret: loginInfo.accessTokenSecret
        };
    }

    // login by assertion (not supported)
    // else if (a.assertion) {
    //     body.jwt = 'dummy'; // this is a hack against the agent vep ?
    //     body.assertion = a.assertion;
    // }

    // login information did not contain either of the two valid patterns
    else {
        throw new Error('Invalid Login Information'); // TODO add more info about how to login, we will probably get a lot of problems here in general
    }

    try {
        const res = await axios({
            method: 'post',
            url,
            data
        });

        if (res.data.error) {
            throw new Error(res.data.error);
        }

        return {
            accountId,
            token: res.data['bearer'],
            sessionId: res.data['sessionId'],
            csrf: res.data['csrf'],
            userId: res.data['config'].userId,
            userPid: res.data['config'].userPid
        };
    }
    catch (err) {
        let data = '';
        if (err.response && err.response.data && err.response.data.error) {
            data = '\n' + err.response.data.error.replace(/%[a-f0-9][a-f0-9]/g, '*');
        }
        // clean up and re-throw axios errors
        const newErr = _cleanAxiosErrorForLogging(err);
        throw new VError(newErr, `Error while getting auth token from AgentVEP${data}`);
    }

}

async function refreshSession(accountId, authSessionInfo) {
    const domain = await CSDS.lookup(accountId, CSDS.ServiceName.agentVep);

    const url = `${CSDS.defaultHttpProtocol}://${domain}/api/account/${accountId}/refresh?v=1.3`;

    try {
        // as long as this comes back 200, the session has been refreshed ok
        const res = await axios({
            method: 'post',
            url,
            headers: {
                Cookie: `session_id=${authSessionInfo.sessionId};`
            },
            data: {
                csrf: authSessionInfo.csrf,
            }
        });

    } catch (err) {
        // catch axios errors, clean up and re-throw
        throw _cleanAxiosErrorForLogging(err);
    }
}

module.exports = {
    getAgentSession,
    refreshSession
}
