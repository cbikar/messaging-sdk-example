
function sleepWithCancel(time) {
    let timeout = null;
    let rej;

    const p = new Promise((resolve, reject) => {
        rej = reject;
        timeout = setTimeout(() => {
            timeout = null;
            rej = null;
            resolve();
        }, time);
    });

    p.cancel = () => {
        if (timeout === null) {
            return;
        }

        // stop the timeout
        clearTimeout(timeout);
        timeout = null;

        // reject to indicate it was cancelled
        rej();
    }

    return p;
}

async function waitForEvent(o, eventName, timeout) {
    return new Promise((resolve, reject) => {

        const timeoutRef = setTimeout(() => {
            o.removeListener(eventName, onEvent);
            reject(new Error(`timeout waiting for event '${eventName}'`));
        }, timeout);

        function onEvent(a) {
            clearTimeout(timeoutRef);
            resolve(a);
        }

        o.once(eventName, onEvent);
    });
}

module.exports = {
    sleepWithCancel,
    waitForEvent
}