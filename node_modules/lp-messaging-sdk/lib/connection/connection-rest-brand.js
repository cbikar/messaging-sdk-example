const RestConnection = require('./connection-rest');
const apiV1 = require('../../lib/api/rest').v1;
const MessageAudience = require('../api/message-audience');
const TokenMaintainer = require("./token-maintainer");
const DeliveryStatus = require("../conversation/delivery-status");
const ConversationState = require("../conversation/conversation-state");
const ShiftStatusPoller = require("./shift-status-poller");

class BrandRestConnection extends RestConnection {

    constructor(a) {
        super(a);

        this._tokenGenerationPromise = null;

        this.authData = a.authData;

        this.tokenMaintainer = null;
        // set up TokenMaintainer if token not passed in
        if (this.token === null) {
            this._initTokenMaintainer();
        }
        this.agentId = null; // will be null until userId is retrieved at login

        // setup shift status poller
        this._pollShiftStatus = a.pollShiftStatus;
        this.shiftStatusPoller = null;
        if (this._pollShiftStatus) {
            this._initShiftStatusPoller();
        }
    }

    get api() {
        return apiV1;
    }

    async _onConnect () {
        if (this._pollShiftStatus) {
            await this.shiftStatusPoller.start();
        }
    }

    /**
     * Sets up listeners for tokenMaintainer
     * @private
     */
    _initTokenMaintainer() {

        this.tokenMaintainer = new TokenMaintainer({accountId: this.accountId, authData: this.authData});

        this.tokenMaintainer
            .on('error', err => this._emitError(err))
            .on('token-invalid', source => this.emit('token-invalid', source))
            .on('refresh-token', () => {this.emit('refresh-token')})
            .on('token-regenerated', info => {this.emit('token-regenerated', info)})
            .on('getAgentToken#request', info => this.emit('getAgentToken#request', info))
            .on('getAgentToken#response', info => this.emit('getAgentToken#request', info));
    }

    /**
     * Sets up Shift Status Poller
     * @private
     */
    _initShiftStatusPoller() {
        this.shiftStatusPoller = new ShiftStatusPoller ({ tokenMaintainer: this.tokenMaintainer, accountId: this.accountId, token: this.token });
        this.shiftStatusPoller.on('shiftStatusData', this.processShiftStatusResponse.bind(this));
    }

    /**
     * Called during _connect() to start the TokenMaintainer, if not yet started
     * @returns {Promise<void>}
     * @private
     */
    async _initToken() {

        await this.tokenMaintainer.start();

        // set the agentId
        this.agentId = this.tokenMaintainer.agentId;

        // return
        await this.getToken();
    }

    async getToken() {

        // if a token was passed in during connection creation, tokenMaintainer is not initialized
        // simply return that token
        if (this.tokenMaintainer === null) {
            return this.token;
        }

        return await this.tokenMaintainer.getToken();
    }

    async close() {
        // pre-emptively stop shift status poller
        if (this.shiftStatusPoller !== null) {
            this.shiftStatusPoller.stop();
        }

        if (this.tokenMaintainer !== null) {
            // pre-emptively stop refreshing token
            this.tokenMaintainer.stop();
        }

        await super.close();
    }

    async getUploadUrl(fileSize, fileType) {

        const token = await this.getToken();

        const res = await this.api.getUploadUrl({
            accountId: this.accountId,
            token,
            fileSize,
            fileType
        });

        return res.data;
    }

    async getDownloadUrl(relativePath) {

        const token = await this.getToken();

        const res = await this.api.getDownloadUrl({
            accountId: this.accountId,
            token,
            relativePath
        });

        return res.data;
    }

    async _sendMessage(conversationId, dialogId, text, metadata) {

        const token = await this.getToken();

        const res = await this.api.publishMessage({
            accountId: this.accountId,
            token,
            conversationId,
            dialogId,
            text,
            metadata
        });

        return res.data;
    }

    async _sendPrivateMessage(conversationId, dialogId, text, metadata) {

        const token = await this.getToken();

        const res = await this.api.publishMessage({
            accountId: this.accountId,
            token,
            conversationId,
            dialogId,
            text,
            metadata,
            messageAudience: MessageAudience.AGENTS_AND_MANAGERS
        });

        return res.data;
    }

    async _sendRichText(conversationId, dialogId, content, metadata = []) {

        const token = await this.getToken();

        const res = await this.api.publishRichContent({
            accountId: this.accountId,
            token,
            conversationId,
            dialogId,
            content,
            metadata
        });

        return res.data;
    }

    async _sendAcceptStatus(conversationId, dialogId, sequenceList) {

        const token = await this.getToken();

        const res = await this.api.publishAcceptStatus({
            accountId: this.accountId,
            token,
            conversationId,
            dialogId,
            status: DeliveryStatus.ACCEPT,
            sequenceList
        });

        return res.data;
    }

    async _sendReadStatus(conversationId, dialogId, sequenceList) {

        const token = await this.getToken();

        const res = await this.api.publishAcceptStatus({
            accountId: this.accountId,
            token,
            conversationId,
            dialogId,
            status: DeliveryStatus.READ,
            sequenceList
        });

        return res.data;
    }

    async _setChatState(conversationId, dialogId, chatState) {

        const token = await this.getToken();

        const res = await this.api.setChatState({
            accountId: this.accountId,
            token,
            conversationId,
            dialogId,
            chatState
        });

        // no data returned
        return res;
    }

    async _queryMessages(query = {}) {

        const token = await this.getToken();

        const res = await this.api.getMessages({
            accountId: this.accountId,
            token,
            dialogId: query.dialogId,
            maxQuantity: query.maxQuantity,
            sequenceMin: query.sequenceMin,
            sequenceMax: query.sequenceMax,
            offset: query.offset,
            filters: query.filters
        });

        return res.data;
    }

    async _joinDialog(conversationId, agentId, participantRole) {

        const token = await this.getToken();

        const res = await this.api.addParticipant({
            accountId: this.accountId,
            token,
            agentId: this.agentId,
            participantRole,
            conversationId,
            dialogId: conversationId
        });

        return res.data;
    }

    async _closeDialog(conversationId, dialogId, dialogCloseReason = null) {

        const token = await this.getToken();

        const res = await this.api.closeDialog({
            accountId: this.accountId,
            token,
            conversationId,
            dialogId,
            closeReason: dialogCloseReason
        });

        return res.data;
    }

    async _closeConversation(conversationId) {

        const token = await this.getToken();

        const res = await this.api.updateConversationStage({
            accountId: this.accountId,
            token,
            conversationId,
            stage: ConversationState.CLOSE
        });

        return res.data;
    }

    async _transferConversation(transferDetails = {}) {

        const token = await this.getToken();

        const res = await this.api.transferConversation({
            accountId: this.accountId,
            token,
            conversationId: transferDetails.conversationId,
            skillId: transferDetails.skillId,
            agentId: transferDetails.agentId,
            removeAgentId: transferDetails.removeAgentId
        });

        // no data returned
        return res;
    }

    async _setManualETTR(conversationId, manualETTR) {

        const token = await this.getToken();

        const res = await this.api.updateManualETTR({
            accountId: this.accountId,
            token,
            conversationId,
            manualETTR
        });

        return res.data;
    }

    async _setTTR(conversationId, type, value) {

        const token = await this.getToken();

        const res = await this.api.updateTTR({
            accountId: this.accountId,
            token,
            conversationId,
            type,
            value
        });

        return res.data;
    }

    async getConversationById(conversationId) {

        const token = await this.getToken();

        const res = await this.api.getConversationById({
            accountId: this.accountId,
            token,
            conversationId
        });

        return res.data
    }
}

module.exports = BrandRestConnection;
