const EventEmitter = require('events');
const agentVep = require("../services/agentVep");
const {sleepWithCancel} = require("../common");

const tokenRefreshInterval = 1000 * 60 * 4; // 4 minutes

// in seconds
const defaultGenerateTokenSchedule = [
    // quick reconnects
    5,
    10,
    30,

    // waiting for ums to come back online
    60,
    60*2,   //  2 minutes
    60*3,   //  3 minutes
    60*4,   //  4 minutes
    60*5,   //  5 minutes
    60*10,  // 10 minutes

    // TODO add flag to enable extended retries (it should be disabled by default)
    // extended retries
    60*30,  // 30 minutes
    60*60,  // 1 hour
    60*60*2,// 2 hours
    60*60*4 // 4 hours, the max
];

const TokenMaintainerState = {
    INITIAL: 'INITIAL',
    STARTED: 'STARTED',
    STOPPED: 'STOPPED'
}

/**
 * Represents a process for maintaining a Bearer token for a given accountId and login info
 * @param {Object} args
 * @param {string} args.accountId - the brand's accountId
 * @param {Object} args.authData - username and password to generate Bearer token
 * @param {Object} [args.authSessionInfo] - response object from {@link TokenMaintainer#getAuthSessionInfo}
 * @category Connection
 */
class TokenMaintainer extends EventEmitter {

    constructor({accountId, authData, authSessionInfo = null}) {
        super();
        this.accountId = accountId;
        this.authData = authData;

        this._tokenGenerationPromise = null; // used in _generateToken
        this._regenerateTokenPromise = null; // used in _regenerateToken & getToken

        this._refreshTokenInterval = null // filled in by _startTokenRefreshInterval

        this._generateTokenWaitSchedule = defaultGenerateTokenSchedule;
        this._generateTokenWait = null;

        this.state = TokenMaintainerState.INITIAL;

        // filled in when start is called
        this.token = null;
        this.userId = null;
        this.agentId = null;
        this.authSessionInfo = authSessionInfo;
    }

    /**
     * Starts the TokenMaintainer process
     * @returns {Promise<void>}
     */
    async start() {

        if (this.state === TokenMaintainerState.STARTED) {
            return;
        }

        this.state = TokenMaintainerState.STARTED;

        // if authSessionInfo is passed in constructor, try refreshing the token
        if (this.authSessionInfo !== null) {

            await this._refreshToken();

            // await and extract the authSessionInfo. If refresh succeeds, the constructor authSessionInfo is used
            // otherwise, a new token and authSessionInfo is generated.
            this.authSessionInfo = await this.getAuthSessionInfo();
            this._extractAuthSessionInfo(this.authSessionInfo);
        }

        else {
            await this._generateToken();
        }

        this._startTokenRefreshInterval();
    }

    /**
     * Stops the TokenMaintainer process
     */
    stop() {

        this._stopTokenRefreshInterval();
        this.removeAllListeners();

        this.state = TokenMaintainerState.STOPPED;

        // cancel any token generation attempts that are queued up
        if (this._generateTokenWait !== null) {
            this._generateTokenWait.cancel();
        }
    }

    /**
     * Returns a valid token, awaiting any ongoing token regeneration process
     * @returns {Promise<string>} Agent bearer token
     * @throws {Error} token maintainer not started
     */
    async getToken() {
        const res = await this.getAuthSessionInfo();
        return res.token;
    }

    /**
     * Returns authSessionInfo from agentVep, awaiting any ongoing token regeneration process
     * @returns {Promise<Object>} authSessionInfo
     * @throws {Error} token maintainer not started
     */
    async getAuthSessionInfo() {

        // if state is INITIAL or STOPPED, throw an error
        if (this.state !== TokenMaintainerState.STARTED) {
            throw new Error('token maintainer not started');
        }

        // if we are regenerating, wait until we are done
        // no matter what, when this finishes a valid token must exist, block forever until then
        if (this._regenerateTokenPromise !== null) {
            await this._regenerateTokenPromise;
        }

        return this.authSessionInfo;
    }

    /**
     * Wraps the token generation function.
     * Ensuring that only one token generation is happening at a time
     * @async
     */
    async _generateToken() {

        // only allow one inner call at a time
        if (this._tokenGenerationPromise !== null) {
            return this._tokenGenerationPromise;
        }

        // start the call
        this._tokenGenerationPromise = this._generateTokenLoop();

        // await the promise and clear when done
        await this._tokenGenerationPromise;
        this._tokenGenerationPromise = null;
    }

    async _generateTokenLoop() {
        let generateTokenAttempt = 0;
        while (this.state === TokenMaintainerState.STARTED) {
            // await it and clear the promise when complete
            try {
                this.authSessionInfo = await this._generateTokenInner();
                this._extractAuthSessionInfo(this.authSessionInfo);
                return;
            }
            catch (err) {
                // todo if the error indicates that user doesnt exist then throw
                this.emit('error', err);

                // schedule retry with exponential backoff
                await this._scheduleGenerateTokenInner(generateTokenAttempt);
                generateTokenAttempt += 1;
            }
        }
    }

    async _scheduleGenerateTokenInner(generateTokenAttempt) {

        // find the wait time until the next attempt
        const scheduleIndex = Math.min(generateTokenAttempt, this._generateTokenWaitSchedule.length - 1);
        const waitTime = this._generateTokenWaitSchedule[scheduleIndex];

        // tell anybody who is interested that the attempt will take place after a certain period
        this.emit('generate-token-wait', {seconds: waitTime});

        // sleep for a bit then reattempt token generation
        this._generateTokenWait = sleepWithCancel(waitTime * 1000);

        try {
            await this._generateTokenWait;
        }
        catch (err) {
            // it was cancelled, don't progress
            return;
        }
        finally {
            this._generateTokenWait = null;
        }
    }

    /**
     * Generates an agent token for connecting to UMS
     * @async
     */
    async _generateTokenInner() {
        // metrics start
        const info = {start:Date.now()};
        this.emit('getAgentToken#request', info);

        // make the authentication call
        const value = await agentVep.getAgentSession(this.accountId, this.authData);

        // metrics end
        info.end = Date.now();
        this.emit('getAgentToken#response', info);

        return value;
    }

    _extractAuthSessionInfo(authSessionInfo) {
        // store the token
        this.token = authSessionInfo.token;

        // store the userId
        this.userId = authSessionInfo.userId;

        // generate agentId
        this.agentId = this.accountId + "." + this.userId;
    }

    async _regenerateToken() {

        // if we are already regenerating, dont do it twice
        if (this._regenerateTokenPromise !== null) {
            return this._regenerateTokenPromise;
        }

        // start the generation
        this._regenerateTokenPromise = this._generateToken();

        // wait for it and clear after
        await this._regenerateTokenPromise;
        this._regenerateTokenPromise = null;

        this.emit('token-regenerated', {agentId: this.agentId});

        // stop the previous token refresh and start new interval with the new token
        this._stopTokenRefreshInterval();
        this._startTokenRefreshInterval();
    }

    _startTokenRefreshInterval() {
        this._refreshTokenInterval = setInterval(this._refreshToken.bind(this), tokenRefreshInterval);
    }

    _stopTokenRefreshInterval() {
        if (this._refreshTokenInterval !== null) {
            clearInterval(this._refreshTokenInterval);
            this._refreshTokenInterval = null;
        }
    }

    /**
     * Refreshes the token for a connection
     *
     * @async
     */
    async _refreshToken() {

        // make sure this interval is only running when intended
        if (this.state !== TokenMaintainerState.STARTED) {
            this._stopTokenRefreshInterval();
            return;
        }

        // if refresh fails, stop the refresh process and emit an error
        try {
            await agentVep.refreshSession(this.accountId, this.authSessionInfo);

            // emit an event for tracking
            this.emit('refresh-token');
        }

        catch (err) {

            if (err.response) {

                // agentVep told us that the token we are attempting to refresh is invalid
                if (err.response.status === 401) {
                    try {
                        this.onTokenInvalid('refresh-token');
                        return;
                    }
                    catch (err2) {
                        // emit the agentVep error instead of the initial refreshSession error
                        this.emit('error', err2);
                        return;
                    }
                }

                //else if (err.response.status === 500) {
                // server unavailable now, maintain the interval and try again
                //}
            }

            this.emit('error', err);
        }
    }

    /**
     * This function should be called when a 401 is received when using a bearer token.
     * It will attempt to regen the token and resolve if it succeeds;
     * if it fails it will throw an error
     */
    onTokenInvalid(source) {

        // if token cannot be refreshed, stop the interval and emit event
        this.emit('token-invalid', {source});

        // token is invalid, stop doing this
        this._stopTokenRefreshInterval();

        // this token was valid, but became stale. Regenerate and refresh
        this._regenerateToken();

        // TODO handle these error scenarios:
        //  1. server could be down or in a bad state
        //  2. user has become invalid
    }
}

module.exports = TokenMaintainer;
