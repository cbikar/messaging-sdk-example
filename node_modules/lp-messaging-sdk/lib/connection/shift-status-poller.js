const ShiftStatus = require('../services/shift-status')
const EventEmitter = require('events');
const shiftStatusInterval = 1000 * 60; // 1 minute

/**
 * A poller that will intermittently emit information when there is a change to a shift status
 */
class ShiftStatusPoller extends EventEmitter {
    constructor({accountId, token = null, tokenMaintainer = null}) {
        super();
        this.runningPoller = null; // this is to track the current running poller and create a way for us to stop
        this.tokenMaintainer = tokenMaintainer;
        this._isFirstShiftStatusCall = true;
        this.accountId = accountId;
        this.token = token;
        if (this.token === null && this.tokenMaintainer === null) {
            throw new Error('Null token and tokenMaintainer');
        }
        this.isStarted = false;
    }

    /**
     * Starts the ShiftStatusPoller Process
     */
    async start() {
        if (this.runningPoller || this.isStarted === true) {
            return;
        }
        this.isStarted = true;
        await this._run(this);
    }
    /**
     * Stops the ShiftStatusPoller Process
     */
    stop() {
        if (this.runningPoller !== null) {
            clearTimeout(this.runningPoller);
            this.runningPoller = null;
        }
        this.isStarted = false;
    }
    /**
     * Polls for updated shiftStatus on account and sets the poller to run again at random intervals
     * @private
     * @async
     */
    async _run() {
        await this._callShiftStatus();
        if (this.runningPoller === null && this.isStarted === false) {
            return;
        }
        const time = shiftStatusInterval;
        // add some smoothing time so they aren't all running at the same time
        const smoothPercentRange = this._isFirstShiftStatusCall ? 0.999 : 0.1;
        const smoothTime = -1 * Math.floor(time * Math.random() * smoothPercentRange);
        this.runningPoller = setTimeout(this._run.bind(this), time + smoothTime);
        this._isFirstShiftStatusCall = false;
    }
    /**
     * Gets the shift status for skills on the accountId of the connection
     * @private
     * @async
     * @returns {Promise.<Array.<Object>>} - Array of Shift Status objects
     */
    async _callShiftStatus(regenTokenOnError = true) {
        const info = {start: Date.now()};
        this.emit('getShiftStatus#request', info);

        try {
            const token = this.token !== null ? this.token : await this.tokenMaintainer.getToken();
            const getShiftStatusResponse = await ShiftStatus.getShiftStatus(this.accountId, token);

            info.end = Date.now();
            this.emit('getShiftStatus#response', info);
            this.emit('shiftStatusData', getShiftStatusResponse);

            return getShiftStatusResponse;

        } catch (err) {
            info.end = Date.now();
            this.emit('getShiftStatus#error', err);

            if (regenTokenOnError && err.response && err.response.status === 401) {
                // token no longer valid, regenerate
                this.tokenMaintainer.onTokenInvalid("shift-status");

                // now retry with the valid token, but don't try more than once
                return this._callShiftStatus(false);
            }
        }
    }
}

module.exports = ShiftStatusPoller;
