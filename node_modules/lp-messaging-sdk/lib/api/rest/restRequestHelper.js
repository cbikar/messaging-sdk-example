const axios = require("axios");
const {_cleanAxiosErrorForLogging} = require("../../services/axiosHelper");
const HttpMethod = require('./http-method')
const CSDS = require("../../services/csds-cache");

function generateHeader(accountId, token) {
    return {
        'Brand-ID': accountId,
        'Content-Type': 'application/json',
        'Authorization': token.indexOf('Bearer') === 0 ? token : `Bearer ${token}`
    };
}

async function send({accountId, token, path, header = null, data = null, method = HttpMethod.GET}) {

    if (!(accountId || token || path)) {
        throw new Error(`accountId, token & path are required for every HTTP request`);
    }

    // create the URL
    const host = await CSDS.lookup(accountId, CSDS.ServiceName.asyncMessagingEnt);
    const url = `${CSDS.defaultHttpProtocol}://${host}${path}`;

    // join the headers
    const headersWithAuth = generateHeader(accountId, token);
    Object.assign(headersWithAuth, header);

    // start the request
    let p;
    if (method === HttpMethod.POST) {
        p = axios.post(url, data, {headers: headersWithAuth});
    }
    else if (method === HttpMethod.GET) {
        p = axios.get(url, {headers: headersWithAuth});
    }
    else if (method === HttpMethod.PATCH) {
        p = axios.patch(url, data, {headers: headersWithAuth});
    }
    else if (method === HttpMethod.DELETE) {
        p = axios.delete(url, {headers: headersWithAuth});
    }
    else {
        throw new Error('method incorrect or not defined properly');
    }

    // wait for the request to return
    try {
        return await p;
    }
    catch (err) {
        err = _cleanAxiosErrorForLogging(err);
        throw (err);
    }
}

module.exports = {send};
