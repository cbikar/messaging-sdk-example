const {updateConversationField, v2Context, v3Context} = require('./update-conversation-field');
const {participantsChangeData} = require('./participants-change');
const {skillChangeData} = require('./skill-change');
const ParticipantRole = require('../../../../conversation/participant-role');
const ParticipantChangeType = require("../../../../conversation/participant-change-type");

/**
 * @private
 * @param conversationId
 * @param skillId
 * @param agentId
 * @param removeFromExistingRole
 * @param removeAgentId
 * @returns {{type: updateConversationField.type, body: {conversationField: *, conversationId: *}}|{type: updateConversationField.type, body: {conversationField: *, conversationId: *}}}
 */
function transferConversation(
    {
        conversationId,
        skillId = null,
        agentId = null,
        removeFromExistingRole = null,
        removeAgentId = null
    } = {}) {

    const data = [];

    if (skillId === null && agentId === null && removeAgentId === null) {
        return;
    }

    if (skillId !== null) {
        // transfer to skill
        const res = skillChangeData(skillId);
        data.push(res);
    }

    if (agentId !== null) {

        if (agentId === removeAgentId) {
            throw new Error(`Cannot transfer to the same agent: ${agentId}`)
        }

        // if target agent exists in the conversation e.g. as reader, remove it
        // prevent Transfer to agent failed: Agent already exist error
        if (removeFromExistingRole !== null) {
            const res = participantsChangeData(agentId, removeFromExistingRole, ParticipantChangeType.REMOVE);
            data.push(res);
        }
        // transfer to agent
        const res = participantsChangeData(agentId, ParticipantRole.ASSIGNED_AGENT, ParticipantChangeType.SUGGEST);
        data.push(res);
    }

    if (removeAgentId !== null && data.length > 0) {
        // if any of the above took place and ASSIGNED_AGENT exists, remove it
        const res = participantsChangeData(removeAgentId, ParticipantRole.ASSIGNED_AGENT, ParticipantChangeType.REMOVE);
        data.push(res);
    }

    return updateConversationField.call(this, conversationId, data);
}

module.exports = {
    v2: transferConversation.bind(v2Context),
    v3: transferConversation.bind(v3Context)
};
