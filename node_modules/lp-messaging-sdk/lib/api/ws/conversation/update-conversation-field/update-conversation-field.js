const requestTypeV2 = ".ams.cm.UpdateConversationField";
const requestTypeV3 = "cm.UpdateConversationField";

/**
 * @typedef {string} UpdateConversationFieldName
 */

// https://lpgithub.dev.lprnd.net/Architecture/api-ums/blob/master/api-ums-cm/src/main/java/com/liveperson/api/ams/cm/types/ConversationField.java
/**
 * All of the fields that can be updated with a UpdateConversationField request
 * @enum {UpdateConversationFieldName}
 * @private
 */
const UpdateConversationFieldName = {
    /**
     * Indicates changes in the conversation skill.
     * Updating a skill will return the conversation back to the queue of the specified skill
     */
    Skill: 'Skill',

    /**
     * Add or update a note left on the conversation
     */
    Note: 'Note',

    /**
     * Update the ttr type and value.
     * Value can be set only for CUSTOM ttr type, otherwise the value will be taken from the
     * brand defaults.
     */
    TTRField: 'TTRField',

    /**
     * Update the Delay type and value.
     * Value can be set only for CUSTOM type, otherwise the value will be taken from the
     * brand defaults.
     */
    DelayField: 'DelayField',

    TopicField: 'TopicField',

    ConversationStateField: 'ConversationStateField',

    /**
     * New field in order to mark the state of the conversation
     */
    Stage: 'Stage',

    /**
     * Update the Customer Satisfaction Rate for the assigned agent
     */
    CSATRate: 'CSATRate',

    /**
     * Updates the Participants map on the conversation.
     * Back to queue, for example is done by removing the assigned agent.
     * Agent Manager will be able to join conversation by adding himself as a manager to the conversation,
     * and leave it by removing himself.
     */
    ParticipantsChange: 'ParticipantsChange',

    /**
     * The agent manually sets a time to respond for the conversation.
     * This may change the calculation of the ETTR (Effective Time To Response) by the AAM.
     */
    ManualETTR: 'ManualETTR',

    /**
     * Updates the dialogs map on the conversation.
     */
    DialogChange: 'DialogChange',

    /**
     * Updates the handler to a different account (if authorized to do so)
     */
    ConversationHandler: 'ConversationHandler'
}

function updateConversationField(conversationId, data) {
    return {
        type: this.type,
        body: {
            conversationId,
            conversationField: data
        }
    };
}

module.exports = {
    UpdateConversationFieldName,
    updateConversationField,
    v2Context: {type: requestTypeV2},
    v3Context: {type: requestTypeV3}
};

