const requestTypeV2 = ".ams.aam.SubscribeExConversations";
const requestTypeV3 = "cqm.SubscribeExConversations";

/**
 * @typedef {string} ConversationState
 */

/**
 * @private
 * @enum {ConversationState}
 */
const ConversationState = {
    /** subscribe to conversations whose MAIN dialog has a state of OPEN */
    OPEN: "OPEN",
    /** subscribe to conversations whose MAIN dialog has a state of CLOSE */
    CLOSE: "CLOSE",
    /** subscribe to conversations whose MAIN dialog has a state of LOCKED */
    LOCKED: "LOCKED"
}

// https://lpgithub.dev.lprnd.net/Architecture/api-ums/blob/master/api-ums-aam/src/main/java/com/liveperson/api/ams/aam/SubscribeExConversations.java
// https://lpgithub.dev.lprnd.net/AMS/cqm/blob/master/common/common-model/src/main/java/com/liveperson/cqm/common/model/CqmQueryParameters.java
// https://confluence.liveperson.com/display/CS/AAM+subscription+-+subscribeExConversations

/**
 * Creates json for a SubscribeExConversations request
 * @private
 * @param {ConversationState} state
 */
function subscribeExConversations({
    accountId = null,
    agentId = null,
    consumerId = null,
    conversationId = null,
    state = null,
    stage = null,
    dialogType = null,
    lastUpdateBefore = null,
    lastUpdateAfter = null
} = {}) {
    const request = {
        type: this.type,
        body: {}
    };

    // TODO Incorporate these fields:
    //  groupIds
    //  maxETTR
    //  skills * currently UMS ignores this as per the documentation

    if (state !== null) {
        if (typeof state === 'string') {
            request.body.convState = [state];
        }
        else if (Array.isArray(state)) {
            request.body.convState = state;
        }
    }

    if (stage !== null) {
        if (typeof stage === 'string') {
            request.body.stage = [stage];
        }
        else if (Array.isArray(stage)) {
            request.body.stage = stage;
        }
    }

    if (dialogType !== null) {
        if (typeof dialogType === 'string') {
            request.body.dialogTypes = [dialogType];
        }
        else if (Array.isArray(dialogType)) {
            request.body.dialogTypes = dialogType;
        }
    }

    // in this request accountId is brandId
    if (accountId !== null) {
        request.body.brandId = accountId;
    }

    if (agentId !== null) {
        if (typeof agentId === 'string') {
            request.body.agentIds = [agentId];
        }
        else if (Array.isArray(agentId)) {
            request.body.agentIds = agentId;
        }
    }

    if (consumerId !== null) {
        request.body.consumerId = consumerId;
    }

    if (conversationId !== null) {
        request.body.conversationId = conversationId;
    }

    // show all conversations whose last update was after or equal to t
    if (lastUpdateAfter !== null) {
        request.body.minLastUpdatedTime = lastUpdateAfter;
    }

    // show all conversation whose last update was before or equal to t
    if (lastUpdateBefore !== null) {
        request.body.maxLastUpdatedTime = lastUpdateBefore;
    }

    return request;
}

module.exports = {
    v2: subscribeExConversations.bind({type: requestTypeV2}),
    v3: subscribeExConversations.bind({type: requestTypeV3}),
    ConversationState
};
