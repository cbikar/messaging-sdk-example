const requestTypeV3 = "cm.ConsumerRequestConversation";
const ChannelType = require('../../../conversation/channel-type');
const ConversationContextType = require('../../../conversation/conversation-context-type');

// https://lpgithub.dev.lprnd.net/Architecture/api-ums/blob/master/api-ums-types/src/main/java/com/liveperson/api/ams/types/TTRType.java
/**
 * The ttr types
 * @enum {string}
 * @private
 */
const ttrDefName = {
    NORMAL: 'NORMAL',
    URGENT: 'URGENT',
    PRIORITIZED: 'PRIORITIZED',
    CUSTOM: 'CUSTOM'
};
const TTRType = require('../../../conversation/ttr-type');

/**
 * the default request conversation values
 * @private
 */
const defaultValues = {
    ttrDefName: TTRType.NORMAL,
    channelType: ChannelType.MESSAGING,
    skillId: '-1'
};

/**
 * Creates a consumerRequestConversation request.
 *
 * See this page for information:
 * https://developers.liveperson.com/connector-api-send-api-conversation.html
 *
 * @param {object} options - additional arguments for consumerRequestConversation
 * @param {string} [options.ttrDefName="NORMAL"] - Defines the urgency of the conversation: NORMAL, URGENT, or PRIORITIZED
 * @param {string} [options.channelType="MESSAGING"] - Which channel type is used
 * @param {string} [options.skillId="-1"] - the target skillId for the conversation to be created, defaults to -1 server side
 * @param {object} [options.campaignInfo] - Contains the campaignId and engagementId
 * @param {object} [options.campaignInfo.campaignId] - The campaignId retrieved by the Engagement Monitoring API endpoint
 * @param {object} [options.campaignInfo.engagementId] - The engagementId retrieved by the Engagement Monitoring API endpoint
 * @param {object} [options.conversationContext] - this data will be passed back in the notifications as conversationDetails.context
 * @returns {object} - The request information object to be sent to UMS
 *
 * @private
 */
function consumerRequestConversation(options = {}) {

    // if conversationContext exists, force the type to shark
    // TODO - create a helper for making context objects
    if (options.conversationContext) {
        if (!options.conversationContext.type) {
            options.conversationContext.type = ConversationContextType.CUSTOM;
            options.conversationContext.name = "lp-messaging-sdk";
            options.conversationContext.description = "a default context for lp-messaging-sdk";
        }
    }
    
    // TODO - maybe we should attached clientProperties from the connection to conversationContext automatically?

    // create the body by applying the given options over the top of default values
    const body = Object.assign({}, defaultValues, options);

    return {
        type: requestTypeV3,
        body: body
    };
}

module.exports = {
    // no v2 for this call
    v3: consumerRequestConversation
};
