const requestTypeV2 = ".ams.ms.PublishEvent";
const requestTypeV3 = "ms.PublishEvent";
const MessageAudience = require('../../message-audience');

// https://lpgithub.dev.lprnd.net/Architecture/api-ums/blob/master/api-ums-ms/src/main/java/com/liveperson/api/ams/ms/types/events/AbstractMessagingEvent.java

// metadata must match one of the existing schemas
// https://lpgithub.dev.lprnd.net/Architecture/json-schema/tree/master/json-schema-files/src/main/resources/json_schemas/metadata

/**
 * @typedef {string} PublishEventType
 * @enum {PublishEventType}
 * @private
 */
const PublishEventType = {
    CONTENT_EVENT: 'ContentEvent',
    ACCEPT_STATUS_EVENT: 'AcceptStatusEvent',
    CHAT_STATE_EVENT: 'ChatStateEvent',
    RICH_CONTENT_EVENT: 'RichContentEvent'
};

/**
 * An abstract request type, must be used from one of the three child types
 * @private
 * @param conversationId
 * @param dialogId
 * @param event
 * @param {MessageAudience|string} messageAudience
 * @param {Array<Object>} metadata - an array of metadata entries
 * @returns {WsApiRequest}
 */
function publishEvent(conversationId, dialogId, event, messageAudience = MessageAudience.ALL, metadata = null) {

    const request = {
        type: this.type,
        body: {
            conversationId,
            dialogId,
            messageAudience,
            event
        }
    };

    // append metadata if present
    if (metadata !== null) {
        request.metadata = metadata;
    }

    return request;
}

module.exports = {
    PublishEventType,
    MessageAudience,
    publishEvent,
    v2Context: {type: requestTypeV2},
    v3Context: {type: requestTypeV3}
};
