const ConversationNotificationFeed = require('./conversation-notification-feed');
const SubscriptionState = require('./subscription-state');
const Common = require("../../lib/common");

const clearConversationTimeout = 5000;
const waitForFirstNotificationDuration = 1000 * 60 * 10; // 10 minutes

/**
 * If _limitBreakEnabled is true (it is by default) AND
 * if the count of conversations received in a single notification is greater than this threshold,
 * child conversation subscriptions will be created automatically in order to retrieve the conversations beyond the threshold
 * @type {number}
 * @private
 */
const conversationLimitThreshold = 900; // TODO ideally this would be 1001, but there is a bug in UMS

/**
 * If a child conversation subscription gets created,
 * this value is added to the minLastUpdateTime before it is used to create the child conversation subscription.
 * This creates overlap between the subscriptions to try to prevent items drifting between page sets.
 * @type {number}
 * @private
 */
const childLastUpdateTimeOverlap = 10000;

/**
 * An AAM subscription
 * @category Conversation
 */
class ConversationSubscription extends ConversationNotificationFeed {

    constructor(connection, query) {
        super(connection);

        this.query = query;

        this.subscriptionId = null; // will be filled in during init
        this.state = SubscriptionState.INITIAL;
        this.parentSubscription = null; // will only be not null for child subscriptions
        this._maxNumberChangesReceived = false;
        this._limitBreakEnabled = this.connection._limitBreakEnabled;
    }

    /**
     * Initializes a conversation subscription - ie makes the request to UMS to create the subscription and stores the id
     * @param waitForFirstNotification
     * @param unsubscribeAfterFirstNotification
     */
    async init(waitForFirstNotification = true, unsubscribeAfterFirstNotification = false) {
        await super.init();

        try {
            // make the request to UMS for the subscription
            this.subscriptionId = await this.connection._requestConversationSubscription(this.query);
        }
        catch (err) {
            // change the state, then throw
            this.state = SubscriptionState.FAILED_TO_SUBSCRIBE;
            throw err;
        }

        // indicate success
        this.state = SubscriptionState.SUBSCRIBED;

        // store the subscription under the new id
        this.connection._conversationSubscriptions.set(this.subscriptionId, this);

        // setup the function that waits for the initial notification
        const wait = this._waitForFirstNotification(unsubscribeAfterFirstNotification);

        // wait for it, if that is required, otherwise we'll return without waiting
        if (waitForFirstNotification) {
            await wait;
        }
    }

    /**
     * Waits for the first notification on the subscription.
     * Will check for unsubscribe and limit break
     * This will be called regardless of if the subscription is awaiting the first notification or not
     * @param unsubscribeAfterFirstNotification
     * @returns {Promise<void>}
     * @private
     */
    async _waitForFirstNotification(unsubscribeAfterFirstNotification) {
        // create a promise that will be resolved after a notification is received
        const notification = await Common.waitForEvent(this, 'notification', waitForFirstNotificationDuration);

        if (unsubscribeAfterFirstNotification) {
            await this.unsubscribe();
        }

        // if we are doing limit break checking, await that process here
        if (this._limitBreakEnabled) {
            await this._checkNotificationForLimitBreak(notification);
        }
    }

    async _checkNotificationForLimitBreak(notification) {
        // if first notification has more conversations than the threshold, then create a child subscription
        if (notification.changes.length >= conversationLimitThreshold) {

            // find the oldest last update time
            const minLastUpdateTime = notification.changes.reduce((min, change) => {
                const lastUpdateTime = change.result.conversationDetails.metaDataLastUpdateTs;
                //const lastUpdateTime = change.result.lastUpdateTime;
                return min === null ? lastUpdateTime : Math.min(min, lastUpdateTime);
            }, null);

            this.connection.emit('limit-break', {
                creatingChildSub: true,
                conversationLimitThreshold,
                notificationChangeCount: notification.changes.length,
                minLastUpdateTime
            });

            // make the child sub with +1
            await this._initChildSubscription(minLastUpdateTime + childLastUpdateTimeOverlap);
        }
        else {
            this.connection.emit('limit-break', {
                creatingChildSub: false,
                conversationLimitThreshold,
                notificationChangeCount: notification.changes.length
            });
        }
    }

    /**
     * Creates a child subscription with the cloned query of the current subscription and lastUpdateBefore added on
     * This will init the child sub and tell it to unsubscribe afterwards
     * @param lastUpdateBefore
     * @returns {Promise<ChildConversationSubscription>}
     * @private
     */
    async _initChildSubscription(lastUpdateBefore) {

        const ChildConversationSubscription = require('./conversation-subscription-child');

        // make a copy of query and add last update to it
        const childQuery = JSON.parse(JSON.stringify(this.query));
        childQuery.lastUpdateBefore = lastUpdateBefore;
        childQuery.lastUpdateAfter = 0;

        // create the child subscription
        const parentSubscription = this.parentSubscription || this;
        const child = new ChildConversationSubscription(this.connection, childQuery, parentSubscription);
        await child.init(true, true);

        // for testing purposes
        return child;
    }

    async onNotification(notification) {

        // if state is not subscribed, do not process notifications
        if (this.state !== SubscriptionState.SUBSCRIBED) {
            return;
        }

        // if this is the first notification, it will contain all the conversations on the subscription
        if (!this._hasReceivedFirstNotification) {
            this._removeDeletedConversationsFromCache(notification.changes);
        }

        if (notification.changes.length === 1001) {
            this._maxNumberChangesReceived = true;
            this._emitError(new Error(`max number of changes received in notification for accountId: ${this.connection.accountId}`));
        }

        await super.onNotification(notification);
    }

    /**
     * Checks each conversation in cache against the first subscription notification received from UMS
     * If a conversation in cache is no longer a part of the subscription, remove it from cache
     * @param notificationChanges - the raw subscription notification received from UMS
     * @private
     * @event ConversationSubscription#conversation-deleted
     */
    _removeDeletedConversationsFromCache(notificationChanges) {
        // TODO possibly make this more efficient if it causes problems
        this._conversations.forEach((conversation, conversationId) => {
            // if the current key (conversationId) is not in the notification changes, remove it
            if (!notificationChanges.some(change => change.result.convId === conversationId)) {
                this.emit('conversation-deleted', conversation);
                this._removeConversationFromCache(conversationId);
            }
        });
    }

    _emitError(err) {
        // decorate the err with the subscriptionId
        err.subscriptionId = this.subscriptionId;
        super._emitError(err);
    }

    /**
     * Unsubscribe the current ConversationSubscription from AAM
     * @async
     * @returns void
     */
    async unsubscribe() {
        if (this.state !== SubscriptionState.SUBSCRIBED) {
            this._emitError(new Error('cannot unsubscribe from subscription that is not subscribed'));
            return;
        }

        this.state = SubscriptionState.UNSUBSCRIBING;
        await this.connection.send(this.connection.api.unsubscribeExConversations(this.subscriptionId));
        this.state = SubscriptionState.UNSUBSCRIBED;

        // get all the conversations this is subscribed to, decrement reference for all of them
        for (let conversation of this._conversations.values()) {
            // this will take care of connection conversation cache
            conversation._decrementReferenceCounter();
        }

        // short delay before deleting from connection conversation subscription cache
        // to catch any out of order notifications on the subscription
        if (this.connection._conversationSubscriptions.has(this.subscriptionId)) {
            setTimeout(() => {
                this.connection._conversationSubscriptions.delete(this.subscriptionId);
            }, clearConversationTimeout);
        }
        else {
            this._emitError(new Error(`invalid subscriptionId ${this.subscriptionId}`));
        }
    }
}

module.exports = ConversationSubscription;
