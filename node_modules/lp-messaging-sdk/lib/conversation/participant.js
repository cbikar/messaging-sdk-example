const EventEmitter = require('events');
const ParticipantRole = require('./participant-role');
const ParticipantState = require('./participant-state');
const ParticipantChatState = require('./participant-chat-state');


/**
 * An participant of a dialog
 * @category Conversation
 */
class Participant extends EventEmitter {

    static get ParticipantRole() { return ParticipantRole; }
    static get ParticipantState() { return ParticipantState; }
    static get ParticipantChatState() { return ParticipantChatState; }

    constructor({userId = null, agentId = null, role = null, state = null}) {
        super();
        this.userId = userId;
        this.agentId = agentId;
        this.role = role;
        this.state = state; // is ParticipantState

        if (this.state === ParticipantState.REMOVED) {
            this.chatState = ParticipantChatState.REMOVED;
        }
        else {
            this.chatState = ParticipantChatState.ACTIVE; // TODO is the default ACTIVE?
        }
    }

    /**
     * Takes a participant notification from dialog and updates the state
     * @param notification
     * @private
     */
    _onDialogNotification(notification) {

        // check for role change
        if (this.role !== notification.role) {
            this.role = notification.role;
            this.emit('roleChange', this.role);
        }

        // check for state change
        if (this.state !== notification.state) {
            //console.debug(`participant state change ${this.state} -> ${notification.state}`);
            this.state = notification.state;
            this.emit('stateChange', this.state);
        }

    }

    /**
     * Takes a chat state notification and updates the current state
     * @param event
     * @private
     */
    _onChatStateEventNotification(event) {
        if (event.chatState === this.chatState) {
            return;
        }
        this.chatState = event.chatState;
        this.emit('chatStateChange', this.chatState);
    }

    _setAsRemoved() {
        this.state = ParticipantState.REMOVED;
        this.chatState = ParticipantChatState.REMOVED;
    }

}

module.exports = Participant;
